generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  firstName    String
  lastName     String?
  role         Role          @default(DRIVER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relationships
  wallet       Wallet?
  reservations Reservation[]
}

enum Role {
  DRIVER
  ADMIN
}

model Zone {
  id           String          @id @default(uuid())
  name         String          @unique
  city         String
  basePrice    Float
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relationships
  parkingSlots ParkingSlot[]
}

model ParkingSlot {
  id           String        @id @default(uuid())
  slotNumber   String
  isOccupied   Boolean       @default(false)
  
  // Relationship to Zone
  zoneId       String
  zone         Zone          @relation(fields: [zoneId], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relationships
  reservations Reservation[]
}

model Reservation {
  id               String        @id @default(uuid())
  startTime        DateTime
  endTime          DateTime
  actualEndTime    DateTime?
  totalCost        Float
  isPaid           Boolean       @default(false)
  
  // Relationship to User
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  
  // Relationship to ParkingSlot
  parkingSlotId    String
  parkingSlot      ParkingSlot   @relation(fields: [parkingSlotId], references: [id])

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Wallet {
  id           String        @id @default(uuid())
  balance      Float         @default(0.0)
  
  // Relationship to User
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
}